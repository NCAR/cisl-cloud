# With a Kubernetes cluster available and HELM installed, this HELM values
# file will install JupyterHub in the Kubernetes cluster. It is also assumed
# that you have helm and kubectl installed and configured on your workstation.
# This HELM values file will require modifications which are found and 
# described by searching for 'MODS'
# Use this file as a values.yaml reference when installing the zero2jupyterhub helm chart
# following the documentation : https://z2jh.jupyter.org/en/stable/jupyterhub/installation.html#install-jupyterhub
jupyterhub:
    hub:
        config:
            JupyterHub:
                # <MODS> You will need to configure your authentication below. Below is currently
                # a template for Github auth and you need to fill out client_id, client_secret
                # and adjust the oauth_callback_url. This info can be generated within Developer settings
                # in Github via OAuth Apps using that oauth_callback_url you define.
                # Here is a reference to other auth ways:
                # https://jupyterhub.readthedocs.io/en/stable/tutorial/getting-started/authenticators-users-basics.html
                # </MODS>
                authenticator_class: github
            GitHubOAuthenticator:
                client_id: ENC[AES256_GCM,data:6KHx648Tkz0Z4sOo+nQCAkAwFwA=,iv:fy6mFQKNgQceOKHcZ4z5R+Bv8GLKYmxzp4gJ28/pxzA=,tag:ubv+7rxjaoOSuYoLoTX5EA==,type:str]
                client_secret: ENC[AES256_GCM,data:iaG94PuEtQ3DXQ6bAZspPRBTrYSmMeO8aB7a+fX7jz+Rc7FXjeY8LA==,iv:RV8GfufHaYOtKuzQZx4GVGJm0CarWS/RCuAq5dH8bOE=,tag:GfYqAUt2AWIy1EDktHGxIw==,type:str]
                oauth_callback_url: ENC[AES256_GCM,data:ncEchfJlA+20cypplNqMfDNc6++25WXAzJyHLNu4UqPO+6v6Ieu0FQ3PKPfGQhQ=,iv:qO2nZS+tlGW0DoBPmCkDKn5KxhDLNrrDyZDWe0aR2lE=,tag:NlZ3RhEPN+ZulrXp1nBHUw==,type:str]
                allowed_organizations:
                    - ENC[AES256_GCM,data:/1rwXfdxbCq76OkN/Bl2ecfxRYjY,iv:Gy4brJMMheJtem0pLM1b3oYB8qVAU1LMOvtbZS8fCvU=,tag:1T0lEFYNcP8ZDIhkT14KrQ==,type:str]
                scope:
                    - read:org
            Authenticator:
                # <MODS> adjust the admin_users if needed. These use Github usernames </MODS>
                admin_users:
                    - ENC[AES256_GCM,data:k1ADJTb0vL6P3hm7VlNsfi7AuAzHliuCmDSPQ5KmNA==,iv:tHbW501vkTpNL/7BKbWMcfb4J4mWQIOCAOVTL6gVnS0=,tag:+pcUk6liDjLZCSRr3tVGsQ==,type:comment]
                    - ENC[AES256_GCM,data:CykAH5S3v9G8pw==,iv:6v6ubXbrSzXGufWBzAhya1heB2s0ClLRWn2T/As/678=,tag:EpQz5JoB/JMzFiCzmlsTOQ==,type:str]
                    - ENC[AES256_GCM,data:d4mhh3xKZ4M9Ou5H/tTAKjprrXNI8qjNSHIWiZNVOildB5T/,iv:XtmQjMr4TfWlD50Z5RskjSGNKjR2TDnavo7fgcRi4bw=,tag:NIQa02EbRuuPsuZ0xfyBNg==,type:comment]
                    - ENC[AES256_GCM,data:zY5v8G9G4LFEb1oC,iv:PBP0gWi04ZS7gKLOiI4xqn7iX5eN2JqHA9bIWzEzZVA=,tag:ZWk09WxFM/nr4KcYfin5VQ==,type:str]
                    - ENC[AES256_GCM,data:Cudnmkvwpa1vTh1lTi/qS6pBeUllbnPnDtK0YdJhp3d5fuPE9+okuw==,iv:30jQY6r3wRF3XT59qYems1o30gqtVlqTWiSD6eolK/4=,tag:B0pMIamDrU38vKqwh3oAqA==,type:comment]
                    - ENC[AES256_GCM,data:81jRFwgwYhHp,iv:VXjJ+AArbCl6xXD6qCATVW74mv1E41goNjrSjIyncKs=,tag:S/oGueMaM1scyYMZbB0BpQ==,type:str]
                    - ENC[AES256_GCM,data:6eXfXxapSD36GcBCtt40LOl0GAYG/kpblktp6OykoMOriA==,iv:hnwTB2eapK6hsKQZifc0b6RIJ/9eNPnfklxDQbwfZRE=,tag:pRmKA8Ryp1A3w+RsiEFTaA==,type:comment]
                    - ENC[AES256_GCM,data:szXUA4gIUSeoBpUZ67c=,iv:77RlX5ejZZfa+29ZLATT2kOqpCH1ox1BDa5PcZZJ5Ew=,tag:PhAynVDlHswQp1eRpQon3g==,type:str]
        networkPolicy:
            egress:
                - ports:
                    - port: 6443
                - to:
                    - podSelector:
                        matchLabels:
                            app.kubernetes.io/name: dask-gateway
                  ports:
                    - port: 8000
    proxy:
        # <MODS> Make sure you fill in a secretToken. Run: 'openssl rand -hex 32'
        # on your local workstation to get that value. </MODS>
        secretToken: ENC[AES256_GCM,data:aikREjcX4mCFt1c8ZCXmol7LRUMPXJkY+u2COYbUEIUOyNFz6bXsvJl3LJJkmOruUEpeNWy6YuBQ27lPgVquvQ==,iv:yiiQCwoH0Pfe3hCY9Mt/Pk2bE5A6aopBX4EuihhPN2U=,tag:1Jixnba/Cp0L2dVLcQRBag==,type:str]
        service:
            type: ClusterIP
        chp:
            networkPolicy:
                egress:
                    - to:
                        - podSelector:
                            matchLabels:
                                app.kubernetes.io/name: dask-gateway
                      ports:
                        - port: 8000
    singleuser:
        networkPolicy:
            egress:
                - to:
                    - podSelector:
                        matchLabels:
                            app.kubernetes.io/name: dask-gateway
                  ports:
                    - port: 8000
        extraEnv:
            # About DASK_ prefixed variables we set:
            #
            # 1. k8s native variable expansion is applied with $(MY_ENV) syntax. The
            #    order variables are defined matters though and we are under the
            #    mercy of how KubeSpawner renders our passed dictionaries.
            #
            # 2. Dask loads local YAML config.
            #
            # 3. Dask loads environment variables prefixed DASK_.
            #    - DASK_ is stripped
            #    - Capitalization is ignored
            #    - Double underscore means a nested configuration
            #    - `ast.literal_eval` is used to parse values
            #
            # 4. dask-gateway and dask-distributed looks at its config and expands
            #    expressions in {} again, sometimes only with the environment
            #    variables as context but sometimes also with additional variables.
            #
            # References:
            # - K8s expansion:     https://kubernetes.io/docs/tasks/inject-data-application/define-interdependent-environment-variables/
            # - KubeSpawner issue: https://github.com/jupyterhub/kubespawner/issues/491
            # - Dask config:       https://docs.dask.org/en/latest/configuration.html
            # - Exploration issue: https://github.com/2i2c-org/infrastructure/issues/442
            #
            # DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE makes the default worker image
            # match the singleuser image.
            DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE: '{{JUPYTER_IMAGE_SPEC}}'
            # DASK_GATEWAY__CLUSTER__OPTIONS__ENVIRONMENT makes some environment
            # variables be copied over to the worker nodes from the user nodes.
            DASK_GATEWAY__CLUSTER__OPTIONS__ENVIRONMENT: '{{"SCRATCH_BUCKET": "$(SCRATCH_BUCKET)", "PANGEO_SCRATCH": "$(PANGEO_SCRATCH)"}}'
            # DASK_DISTRIBUTED__DASHBOARD__LINK makes the suggested link to the
            # dashboard account for the /user/<username>/<server-name> prefix in the path.
            # JUPYTERHUB_SERVICE_PREFIX has leading and trailing slashes as appropriate
            DASK_DISTRIBUTED__DASHBOARD__LINK: '{{JUPYTERHUB_SERVICE_PREFIX}}proxy/{{port}}/status'
        storage:
            extraVolumes:
                - name: ENC[AES256_GCM,data:ckLV5opI/PCqpQ==,iv:wq1U9gt7PNHt+5NALZn4oJ/YAMbxr7fOYh4BUdTdJRc=,tag:oKoaPcru9BTpaTDRapPaog==,type:str]
                  nfs:
                    server: ENC[AES256_GCM,data:aWN9P8Glnw4RW74apqkxmm+vQgD87Q==,iv:NSlP2Awsxw4H1CTVbTggqWrdPK+vgB2/3tCC+e9gPmA=,tag:vtauyrJ552kp1uzChvoa4w==,type:str]
                    path: ENC[AES256_GCM,data:cKTVB59iDPQSPaebU0wVFbCFzE20RAmUDM6UMDt13Q==,iv:UkXhu7Fch57keTsamweR/z9jMR5ahEHChJPmNbiBSX4=,tag:Uf4p/e/2eCnsH8Edyw4Zpg==,type:str]
                - name: ENC[AES256_GCM,data:UHPjNilAL6g=,iv:rl6So41imZCUB96mwoGJTFsmbXFLW32PGlXFA8DMl7k=,tag:4ed9mqGpEh8V4ZYjG0omrQ==,type:str]
                  nfs:
                    server: ENC[AES256_GCM,data:JWQdzBg0rTlyrzlIUyvfiSY=,iv:8/DcmoMNDJ3VzwSKPF8vnKGCaqwjfRDviLZ99eYkdAo=,tag:5l0srzjpNxOX7fLDiRaqZA==,type:str]
                    path: ENC[AES256_GCM,data:OWDchOahtsvl/C0=,iv:l89D9bfSbYSzqVjxaRX21wmM8UTWugQ0ZQRtW2C/q7Y=,tag:zLI5ZEStRln+2tytitqPZA==,type:str]
            extraVolumeMounts:
                - name: ENC[AES256_GCM,data:1wj1w50OsINImQ==,iv:c64TFSjks2OgiuA/aKU4P0nmgj2Tc8MKiKxbXmxOdNA=,tag:EcN7oM2QQHe3VUWGPcmU/g==,type:str]
                  mountPath: ENC[AES256_GCM,data:CH3EjnHYfajFt8qnr7dWscjiUA==,iv:lKvAjFhMXShhrOFnWLad82XUGHQK/sHKmWz5FuRUH58=,tag:L+XT9S71KIMCiP9Hn5O5rg==,type:str]
                  readOnly: ENC[AES256_GCM,data:uqsATQ==,iv:Uhlus1Dp7m6FbVPdNEC4eDkU2mthymTW6dxIkayMkaY=,tag:Y62rKWmutXf1dMEex51bEg==,type:bool]
                - name: ENC[AES256_GCM,data:s8uEdyPzZIQ=,iv:2NP14yuT71pvwpS2rUxWiVYNld0oL8q2lIwVbXb8vPw=,tag:deJYqk5GSlkOpkMx9+Hxjw==,type:str]
                  mountPath: ENC[AES256_GCM,data:AGqdWSIDyENz7NECtHL2,iv:q5sxDpfNw68VufgaGk+Rk9WUhLfq/zEGb9Le0gQXCXE=,tag:q4lwDs6rvjae7vYhwQbD8A==,type:str]
                  readOnly: ENC[AES256_GCM,data:VL+aMw==,iv:+pbxIUF3CtbsNortNfGKQ9fok0TGjQsq7ZUIzVTryGc=,tag:y082spCP2CMjtB0QjMp0xA==,type:bool]
        image:
            # image choice preliminary and is expected to be setup via
            # https://ncar-cisl.2i2c.cloud/services/configurator/ by the community
            #
            # pangeo/pangeo-notebook is maintained at: https://github.com/pangeo-data/pangeo-docker-images
            name: pangeo/pangeo-notebook
            tag: 2024.01.15
        profileList:
            # NOTE: About node sharing
            #
            #       CPU/Memory requests/limits are actively considered still. This
            #       profile list is setup to involve node sharing as considered in
            #       https://github.com/2i2c-org/infrastructure/issues/2121.
            #
            #       - Memory requests are different from the description, based on:
            #         whats found to remain allocate in k8s, subtracting 1GiB
            #         overhead for misc system pods, and transitioning from GB in
            #         description to GiB in mem_guarantee.
            #       - CPU requests are lower than the description, with a factor of
            #         10%.
            #
            - display_name: NSF NCAR CPU Notebook
              description: Start a container with the chosen specifications
              slug: ncarcpu
              default: true
              profile_options:
                requests:
                    # NOTE: Node share choices are in active development, see comment
                    #       next to profileList: above.
                    display_name: Resource Selection
                    choices:
                        mem_1:
                            default: true
                            display_name: ~1 GB, ~0.125 CPU
                            kubespawner_override:
                                mem_guarantee: 0.904G
                                cpu_guarantee: 0.013
                        mem_4:
                            display_name: ~4 GB, ~0.5 CPU
                            kubespawner_override:
                                mem_guarantee: 1.809G
                                cpu_guarantee: 0.025
                        mem_16:
                            display_name: ~16 GB, ~2.0 CPU
                            kubespawner_override:
                                mem_guarantee: 14.469G
                                cpu_guarantee: 0.5
              kubespawner_override:
                image: hub.k8s.ucar.edu/cislcloudpilot/cisl-cloud-base:2024-02-05.19
                imagePullSecrets:
                    - harbor-registry-secret
                cpu_limit: null
                mem_limit: null
            - display_name: NSF NCAR GPU Notebooks
              slug: ncargpu
              description: Start a container with access to GPU hardware
              profile_options:
                image:
                    display_name: Image
                    choices:
                        ncartensor:
                            display_name: NCAR Tensorflow ML Notebook
                            slug: ncartensor
                            kubespawner_override:
                                image: hub.k8s.ucar.edu/cislcloudpilot/cisl-cloud-gpu-tf:2024-02-06.17
                                imagePullSecrets:
                                    - harbor-registry-secret
                        ncarpytorch:
                            display_name: NCAR Pytorch ML Notebook
                            slug: ncarpytorch
                            kubespawner_override:
                                image: hub.k8s.ucar.edu/cislcloudpilot/cisl-cloud-gpu-pyt:2023-12-27.01
                                imagePullSecrets:
                                    - harbor-registry-secret
              kubespawner_override:
                mem_limit: null
                mem_guarantee: 14G
                environment:
                    NVIDIA_DRIVER_CAPABILITIES: compute,utility,graphics
                extra_pod_config:
                    runtimeClassName: nvidia
                extra_resource_limits:
                    nvidia.com/gpu: "1"
    ingress:
        enabled: true
        annotations:
            nginx.ingress.kubernetes.io/proxy-body-size: 600m
            nginx.org/client-max-body-size: 10m
            nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
            nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/secure-backends: "true"
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/websocket-services: proxy-public
            nginx.org/websocket-services: proxy-public
            cert-manager.io/cluster-issuer: incommon
        ingressClassName: nginx
        # <MODS> Adjust the hosts entries in this next session.
        hosts:
            - ENC[AES256_GCM,data:zkgWLTbU3SjSXCEZPaCje5/ox00=,iv:V317li0VUrCB6acFbjhnPV9K39rvtzgbnc9dsbFHY2k=,tag:R2lgG/h0Pmv0N7imCi6vAQ==,type:str]
        tls:
            - hosts:
                - ENC[AES256_GCM,data:tlLM5qgITEFurFoXVDKxU9WGpD0=,iv:inMmb4qJkLoQ+rtXoYeeakOcZFtUteT6AJPQNye9VIQ=,tag:VqVU7L0GuWf4/tXA3w+Tqw==,type:str]
              secretName: ENC[AES256_GCM,data:5ZuQ5D+rJJ9obXRXkDlt4QWpFg==,iv:prqnSITut9/8rvBQ1pXJgcFOcN6IwsAph2I+J3XtpCc=,tag:eiKoR0T9kMcFwGITdLnQYg==,type:str]
              # </MODS>
dask-gateway:
    # Enabling dask-gateway will install Dask Gateway as a dependency.
    enabled: true
    # Futher Dask Gateway configuration goes here
    # See https://github.com/dask/dask-gateway/blob/master/resources/helm/dask-gateway/values.yaml
    gateway:
        backend:
            scheduler:
                extraPodConfig: null
                #          serviceAccountName: user-sa
                #          tolerations:
                #            # Let's put schedulers on notebook nodes, since they aren't ephemeral
                #            # dask can recover from dead workers, but not dead schedulers
                #            - key: "hub.jupyter.org/dedicated"
                #              operator: "Equal"
                #              value: "user"
                #              effect: "NoSchedule"
                #            - key: "hub.jupyter.org_dedicated"
                #              operator: "Equal"
                #              value: "user"
                #              effect: "NoSchedule"
                #          nodeSelector:
                #            k8s.dask.org/node-purpose: scheduler
                cores:
                    request: 0.01
                    limit: 1
                memory:
                    request: 128M
                    limit: 1G
            worker:
                extraContainerConfig:
                    securityContext:
                        runAsGroup: 1000
                        runAsUser: 1000
                extraPodConfig:
                    #          serviceAccountName: user-sa
                    securityContext:
                        fsGroup: 1000
        #          tolerations:
        #            - key: "k8s.dask.org/dedicated"
        #              operator: "Equal"
        #              value: "worker"
        #              effect: "NoSchedule"
        #            - key: "k8s.dask.org_dedicated"
        #              operator: "Equal"
        #              value: "worker"
        #              effect: "NoSchedule"
        #          nodeSelector:
        #            # Dask workers get their own pre-emptible pool
        #            k8s.dask.org/node-purpose: worker
        # TODO: figure out a replacement for userLimits.
        extraConfig:
            optionHandler: |
                from dask_gateway_server.options import Options, Integer, Float, String, Mapping
                import string

                # Escape a string to be dns-safe in the same way that KubeSpawner does it.
                # Reference https://github.com/jupyterhub/kubespawner/blob/616f72c4aee26c3d2127c6af6086ec50d6cda383/kubespawner/spawner.py#L1828-L1835
                # Adapted from https://github.com/minrk/escapism to avoid installing the package
                # in the dask-gateway api pod which would have been problematic.
                def escape_string_label_safe(to_escape):
                    safe_chars = set(string.ascii_lowercase + string.digits)
                    escape_char = "-"
                    chars = []
                    for c in to_escape:
                        if c in safe_chars:
                            chars.append(c)
                        else:
                            # escape one character
                            buf = []
                            # UTF-8 uses 1 to 4 bytes per character, depending on the Unicode symbol
                            # so we need to transform each byte to its hex value
                            for byte in c.encode("utf8"):
                                buf.append(escape_char)
                                # %X is the hex value of the byte
                                buf.append('%X' % byte)
                            escaped_hex_char = "".join(buf)
                            chars.append(escaped_hex_char)
                    return u''.join(chars)

                def cluster_options(user):
                    safe_username = escape_string_label_safe(user.name)
                    def option_handler(options):
                        if ":" not in options.image:
                            raise ValueError("When specifying an image you must also provide a tag")
                        scheduler_extra_pod_annotations = {
                            "hub.jupyter.org/username": safe_username,
                            "prometheus.io/scrape": "true",
                            "prometheus.io/port": "8787",
                        }
                        extra_labels = {
                            "hub.jupyter.org/username": safe_username,
                        }
                        return {
                            "worker_cores_limit": options.worker_cores,
                            "worker_cores": options.worker_cores,
                            "worker_memory": "%fG" % options.worker_memory,
                            "image": options.image,
                            "scheduler_extra_pod_annotations": scheduler_extra_pod_annotations,
                            "scheduler_extra_pod_labels": extra_labels,
                            "worker_extra_pod_labels": extra_labels,
                            "environment": options.environment,
                        }
                    return Options(
                        Integer("worker_cores", 4, min=1, label="Worker Cores"),
                        Float("worker_memory", 8, min=1, label="Worker Memory (GiB)"),
                        # The default image is set via DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE env variable
                        String("image", label="Image"),
                        Mapping("environment", {}, label="Environment Variables"),
                        handler=option_handler,
                    )
                c.Backend.cluster_options = cluster_options
            idle: |
                # timeout after 30 minutes of inactivity
                c.KubeClusterConfig.idle_timeout = 1800
        # Users connect to the Gateway through the JupyterHub service.
        prefix: /services/dask-gateway
        auth:
            # Use JupyterHub to authenticate with Dask Gateway
            type: jupyterhub
    traefik:
        #    nodeSelector:
        #      k8s.dask.org/node-purpose: core
        service:
            # Access Dask Gateway through JupyterHub. To access the Gateway from outside JupyterHub, this must be changed to a `LoadBalancer`.
            type: ClusterIP
# A placeholder as global values that can be referenced from the same location
# of any chart should be possible to provide, but aren't necessarily provided or
# used.
#global: {}
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age:
        - recipient: age1ucetgj7k3whaqf9nulacsqarur6nrgzuyt59apeptu5cphd6ksdsqpy5he
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSAwNTJEMmVqWDhpQU5RdkVs
            bDZCZ2VBZmo5Zno1dzV3em1hNEZEUWxTalhBCitRZENwMDdGazk4aFBVTlgxcVJr
            MW1rcXBVZnFhMXgrZ0J0dlV2Rmk1UmMKLS0tICtPeG5aNXZoR1dCTGg3aWVub0FM
            VmxkRmVVSnR2WTIzZkI3Z1BoeGJna3MKbcavhH3tqT3gmeZs4nzRwALs2RlC/uBY
            VVYyYtYzmB4nGsVclGbp1fcHirHXG8cNZwBWa9eQvCQuYIE7xjmgNg==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1dnkv8vy8xkl5afwuwl55ycpquy2uk7ypc5ad87sfug2zffp6jgkqwwzglr
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBLS1NDM1VuM3JuVzVZZitF
            NmgyN0szZnBUUkhhRG5TV1ZtK1Q3RXhLS1I4CnZsTHFpSUkxd3Jqd1pPWmVxR1lZ
            RHkzZTlrOS9VRE5MbWw2bTZKNDRtbFEKLS0tIGRSQ212ZGV0Z3RTUndYOTBaMEpy
            d1lCa1BMOUhpd244dU5Zc2srUmZ5eFEKQOWFnP3gwAXK1jRpQyGyKbSurHD5/XPI
            zTplarLY7LrGAa184w74H2K+y9D0Vno4mj/BI9UQgKjHINQ0O6IumQ==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1wt75fkqsa2ngrhtmr7ws2ve8v9h2463hryj4jk4k7m5khxmc9pgqgqag8x
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBleTM0d0RWZ2lhZy9OdlBp
            eDRUK2Q2MjQ5Q0RmOVArTXFXa3EwVDdXamdZCitBZTY4RkQvWU5Zc0MwSGxHMER0
            T2NTNElpeVlJYjBUdm5zN2ZhS0picUUKLS0tIFlrZHY4KzMyWHhnaXhsL0lHMjJG
            M3EydkJuZW42YnI5WkR0WCtsNHl0eUEK4c9ONoKw5R9IwIuVnUkHiugfs1G2rjVW
            VdrYiJdGaBDqGgr9bfFpkjm+u9nvWq+1no46ZzaV3PZ+u7IduLO7Aw==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1fqw4znyl0zjpw5ta7ll3auxpzg8dme578jgw43a0dtzjhwjn4qlstaez7c
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBkLzUyNWR5bUJRK1RCTE5y
            RS93NFBUKzM2VHF2YndubldHbEFlWCtYWmk0CmtVOGo1QVJ2VnFtL0tjV0g0SzdS
            c2NGelB0SE04MjBJK1pSalpPZDVIOUEKLS0tIC9VTmVONUl4WGNmSUljNUwraFZ4
            R1B4b0JjUDNHbDJIVzF5ZUNnK2JSencKaJ409NdwqEdZX6ObucUHs/49H54Xcg/y
            oyHKbfs0ThSZEzUQM5c7sAwdG3lj6jkad2o8nnLFVXUbGo/qp5OoZA==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1m2ay7zlek6d4uctt09vsw5l8gpydjlvu9xemv8pqh97urdmhhyrsh9qe86
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSB5QnFKdnF4VktZVVdCdHJ6
            TmNIaVRLTHVCcGNjTE1PaWlTOHVkTG9JdWhzCkxHQ0tIdEgrNFh1dDFLblY1RFk2
            N0NUckZtRFVXVkxOSCtEYlJHaHE4UTQKLS0tIHRmVXdHVGhUb05UYlpCdmgveGRt
            RFdTN3V6REJ0VkZJZ0JBMlFlV1F2K3MKkJVDzxC6VympX8vY8bq+8tmMDgctzJ96
            DWhZZadxE8LJRMt4EHJR8CNwq0RFYB4D6lXAJeUQQtOBphr7G7iqQw==
            -----END AGE ENCRYPTED FILE-----
    lastmodified: "2024-03-19T15:14:40Z"
    mac: ENC[AES256_GCM,data:CvVsr4L08z40RPvotkRs24U/CH876PPJJRcyA/irTaRhlTVqXXorkLTmAxxI9q6Bdvmbndbn0CrzZLbW0yCPQsuWmdlJvzaq1MetZUENDDZVfL3au41RLCfEC6gF82rdQ42Denq/grjGc9snY1D/VlTtwM7UNMq2rBZwCxxVN3M=,iv:1ho4r5zZfVDmJsQUMbHMbmhL4ywwXU+Ljq3dPRnGUgA=,tag:txKfOloWWrCrFa+Y+qGEPg==,type:str]
    pgp: []
    encrypted_regex: ^(client_id|client_secret|secretToken|admin_users|oauth_callback_url|allowed_organizations|extraVolumes|extraVolumeMounts|hosts|secretName)$
    version: 3.8.1
