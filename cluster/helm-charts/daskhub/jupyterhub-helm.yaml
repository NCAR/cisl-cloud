# With a Kubernetes cluster available and HELM installed, this HELM values
# file will install JupyterHub in the Kubernetes cluster. It is also assumed
# that you have helm and kubectl installed and configured on your workstation.
# This HELM values file will require modifications which are found and 
# described by searching for 'MODS'
# Use this file as a values.yaml reference when installing the zero2jupyterhub helm chart
# following the documentation : https://z2jh.jupyter.org/en/stable/jupyterhub/installation.html#install-jupyterhub
jupyterhub:
    hub:
        config:
            JupyterHub:
                # <MODS> You will need to configure your authentication below. Below is currently
                # a template for Github auth and you need to fill out client_id, client_secret
                # and adjust the oauth_callback_url. This info can be generated within Developer settings
                # in Github via OAuth Apps using that oauth_callback_url you define.
                # Here is a reference to other auth ways:
                # https://jupyterhub.readthedocs.io/en/stable/tutorial/getting-started/authenticators-users-basics.html
                # </MODS>
                authenticator_class: github
            GitHubOAuthenticator:
                client_id: ENC[AES256_GCM,data:CVjKXmvQ7G+KRYmmFdvpf1LAhC8=,iv:H0Jkg+WB6ASImHBLjykYFoa7euKGelPZ/fuAdyLkYgE=,tag:WbFDX3gYeIJm/qHFRARf9A==,type:str]
                client_secret: ENC[AES256_GCM,data:JFrSw+qpuGvgy/apf3rHFrjbSCe0l17iu65GGhJYVB/OSgjsskiUcA==,iv:K12plzR6oQBFGBVgx4dm5B7XbuJbzr9En+xj5P2T/Jk=,tag:cNP6CRTZk9LpRs/IGojymA==,type:str]
                oauth_callback_url: ENC[AES256_GCM,data:Y6larnHgRe9de9PtkLS+7RCvnjtEqN/yRNpwx250NYykST3syyBTl4I8wdg/sS0=,iv:A6kniOYuyrYetZ4xJYIItropSgybY7gWmw9qYpFdgaY=,tag:a25PbeNLpL5sBdD20VUFQQ==,type:str]
                allowed_organizations:
                    - ENC[AES256_GCM,data:AQVUMa0+XpuqaNs00apQ2ziNxw3Q,iv:g0IVAvyyfEJzLaEU7rn3Cp/NHppSHWsDX+w7lHmTY6I=,tag:Uj9WoK2oV4V1R19jBx1PEA==,type:str]
                scope:
                    - read:org
            Authenticator:
                # <MODS> adjust the admin_users if needed. These use Github usernames </MODS>
                admin_users:
                    - ENC[AES256_GCM,data:exEjrAKcwfhAeDCKqbmOWLyrxLE5aMPN1VxOiMsxLw==,iv:yTV2iffqsHdW5l5EPjq1TuOWyC5wHM3f0tpEWAC4ILg=,tag:3xyeCUvOLOnRk0PEixSiXg==,type:comment]
                    - ENC[AES256_GCM,data:FhReHc5sAdt+mg==,iv:hO40tsCJz1Nu7BJ6mKKCG9iYW4n/7RETcdtCKwD30Os=,tag:t98WR+R044FffGdB2ir42A==,type:str]
                    - ENC[AES256_GCM,data:eNSx2I7A2R7X1GiwJRhn0e98xrCY82lraFqxD/AAdMNo2Uzn,iv:KyQAi4I2iKVKJVStuM4Bv25yKlcdH8k3OB4YDC4ufpg=,tag:oIUJNoq86//mQTheXSIFUw==,type:comment]
                    - ENC[AES256_GCM,data:Lg/aIk0qVzxOeTVy,iv:4yihQ0bZUTf9VeOZcGm2pk5kC1PQ4ID+qSyiuclNqx8=,tag:zNm91yvVOrSxsF1zeSrE9w==,type:str]
                    - ENC[AES256_GCM,data:daLMReeKVVcNaHvcNv5cfhCiOWXFCp4rNGXM/O6jItoyOTMZb3EUXA==,iv:D51QgEJDEykRZ9TfwYDO6dj1vXwfJxpxXtWfoDm+v+4=,tag:FbPNDlhzF00JTCWOdWnrsQ==,type:comment]
                    - ENC[AES256_GCM,data:f7Mj6YMXWZJX,iv:F9FOl72uP23khsWTMKPjOUy5FhadIuv1/NDei1I5kG8=,tag:YbOtAIJmgc3U45l9XGn/aw==,type:str]
                    - ENC[AES256_GCM,data:JEdkh9kAPhdGmy+39X6BD8HhvM1CAKzEDQNHHxNl1D3L5g==,iv:EX402WBhiAPidREcYxBwnsppr3AxUQ2Y0V76VpcG8ik=,tag:+k2ym20alLc6zKA+hE635w==,type:comment]
                    - ENC[AES256_GCM,data:KRlil2Wz7gNLVcNAAIs=,iv:rkRpOKWbbr23ML3LhMyvj3Z8mXkay28WZYVX/7N9tgg=,tag:KKN5xpaUEXRcXdAG0L2fZA==,type:str]
    proxy:
        # <MODS> Make sure you fill in a secretToken. Run: 'openssl rand -hex 32'
        # on your local workstation to get that value. </MODS>
        secretToken: ENC[AES256_GCM,data:/nvOw6VpPTrpjeQqbVc4LcBMyoGU3PklhY5/w156CrRts+/yspQ9yMqomDAFxlTFN+1JxjZJl0SajmG9KnXVSw==,iv:6VxTOBPtow4aw96J8SjwFAiNxmw4xf+ZVK+lPtLTqgM=,tag:+oxFW+wCHr0xnmarT2POwQ==,type:str]
        service:
            type: ClusterIP
    singleuser:
        extraEnv:
            # About DASK_ prefixed variables we set:
            #
            # 1. k8s native variable expansion is applied with $(MY_ENV) syntax. The
            #    order variables are defined matters though and we are under the
            #    mercy of how KubeSpawner renders our passed dictionaries.
            #
            # 2. Dask loads local YAML config.
            #
            # 3. Dask loads environment variables prefixed DASK_.
            #    - DASK_ is stripped
            #    - Capitalization is ignored
            #    - Double underscore means a nested configuration
            #    - `ast.literal_eval` is used to parse values
            #
            # 4. dask-gateway and dask-distributed looks at its config and expands
            #    expressions in {} again, sometimes only with the environment
            #    variables as context but sometimes also with additional variables.
            #
            # References:
            # - K8s expansion:     https://kubernetes.io/docs/tasks/inject-data-application/define-interdependent-environment-variables/
            # - KubeSpawner issue: https://github.com/jupyterhub/kubespawner/issues/491
            # - Dask config:       https://docs.dask.org/en/latest/configuration.html
            # - Exploration issue: https://github.com/2i2c-org/infrastructure/issues/442
            #
            # DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE makes the default worker image
            # match the singleuser image.
            DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE: '{{JUPYTER_IMAGE_SPEC}}'
            # DASK_GATEWAY__CLUSTER__OPTIONS__ENVIRONMENT makes some environment
            # variables be copied over to the worker nodes from the user nodes.
            DASK_GATEWAY__CLUSTER__OPTIONS__ENVIRONMENT: '{{"SCRATCH_BUCKET": "$(SCRATCH_BUCKET)", "PANGEO_SCRATCH": "$(PANGEO_SCRATCH)"}}'
            # DASK_DISTRIBUTED__DASHBOARD__LINK makes the suggested link to the
            # dashboard account for the /user/<username>/<server-name> prefix in the path.
            # JUPYTERHUB_SERVICE_PREFIX has leading and trailing slashes as appropriate
            DASK_DISTRIBUTED__DASHBOARD__LINK: '{{JUPYTERHUB_SERVICE_PREFIX}}proxy/{{port}}/status'
        storage:
            extraVolumes:
                - name: ENC[AES256_GCM,data:XOh965R9SS7Nqg==,iv:rsiMB3T4uSdx2//A1nj2fo5VcpSyvnfdFnt0agAm7l0=,tag:IFHUOzvQWOZkgv00JaJDew==,type:str]
                  nfs:
                    server: ENC[AES256_GCM,data:Ll+a6AkGj2TnLuCHGfFGYl/XZFgWdw==,iv:G60vTfB4wNA6V0V6SgHxII9roO67Y5NOOQ1WvRZ9i3o=,tag:aFRsEbZhsTSMw5qFE8pklQ==,type:str]
                    path: ENC[AES256_GCM,data:4UZMWamEIB5Q1wplOe3O3hI3kxuFh9e26e2ei7oUrg==,iv:SZC5XY1nAwC0uMHbpmFoUyREV6yN6L7KLcPzwxkJpdg=,tag:jGfLRCAO77AtdTcUCJc9Ag==,type:str]
                - name: ENC[AES256_GCM,data:ZXvlSV5XU9Y=,iv:DLKIW8N7MnBlRNZfwY0hX2kJ/lY5zMXHGc3eHNsSIJw=,tag:K1D+Nv0X/0/iAxVoqqxmLw==,type:str]
                  nfs:
                    server: ENC[AES256_GCM,data:9pLR31qAW261dNLVl2Ul5QM=,iv:r14Ydrsm+J+l199x1fwkQ7gd32UtCl1RfZrNcTp50Ok=,tag:2p3SJJ5hBT4RHT100GkTYA==,type:str]
                    path: ENC[AES256_GCM,data:iEHfqHPdrKuS7wk=,iv:YlQ5EK4FF4xHu2gyswqnZ3r1OoNKYZCokR8NE+HHBro=,tag:EaEdfvszlYz1nIZngLm6AA==,type:str]
            extraVolumeMounts:
                - name: ENC[AES256_GCM,data:oUCHBUjmM+ISkA==,iv:64vvfP0EtrNoJFv8MFw/4rTHL6S2DEQoyzBHeAbsG4E=,tag:s4lgarJkqXHygkyqzYGw2Q==,type:str]
                  mountPath: ENC[AES256_GCM,data:bfBnAMph0FtmkGzMmIXH1qNCVQ==,iv:M2mbbT2JoNIVXoHH3uZtSmLmYUzP6fWhVj0kOsBby2E=,tag:uwbiguJJR71uXy8U9N9QwA==,type:str]
                  readOnly: ENC[AES256_GCM,data:PQxfCQ==,iv:fzC8QORoJbLbb3gQE2lEzR02I79rU+3uue4xDCRmfIc=,tag:ySZgzvONJemW0oNJoHTCjg==,type:bool]
                - name: ENC[AES256_GCM,data:rtC6HAxC/44=,iv:P6Wlqa9EoZjkYJgo8QXCDHi6xDfzq9+37GpnA5oXU8g=,tag:c4cpInfqB12XuqpEh9Sc/g==,type:str]
                  mountPath: ENC[AES256_GCM,data:oVKo5Vd/ZfXizw0IBgeV,iv:P82Kp5lTRNQ1NR0vqrDb5UPmnKJw7Ye5U//6MnyE84k=,tag:6Un+4iJKM9n7SoM7jJdjWA==,type:str]
                  readOnly: ENC[AES256_GCM,data:pFGcyw==,iv:yxpWdSaZDD/NoW6jOqnExZzrC3opQSPQPwMhXF1thAA=,tag:9aIOoDXT4zQ6sbN5eZZnmQ==,type:bool]
        image:
            # image choice preliminary and is expected to be setup via
            # https://ncar-cisl.2i2c.cloud/services/configurator/ by the community
            #
            # pangeo/pangeo-notebook is maintained at: https://github.com/pangeo-data/pangeo-docker-images
            name: pangeo/pangeo-notebook
            tag: 2023.05.18
        profileList:
            # NOTE: About node sharing
            #
            #       CPU/Memory requests/limits are actively considered still. This
            #       profile list is setup to involve node sharing as considered in
            #       https://github.com/2i2c-org/infrastructure/issues/2121.
            #
            #       - Memory requests are different from the description, based on:
            #         whats found to remain allocate in k8s, subtracting 1GiB
            #         overhead for misc system pods, and transitioning from GB in
            #         description to GiB in mem_guarantee.
            #       - CPU requests are lower than the description, with a factor of
            #         10%.
            #
            - display_name: NSF NCAR CPU Notebook
              description: Start a container with the chosen specifications
              slug: ncarcpu
              default: true
              profile_options:
                requests:
                    # NOTE: Node share choices are in active development, see comment
                    #       next to profileList: above.
                    display_name: Resource Selection
                    choices:
                        mem_1:
                            default: true
                            display_name: ~1 GB, ~0.125 CPU
                            kubespawner_override:
                                mem_guarantee: 0.904G
                                cpu_guarantee: 0.013
                        mem_4:
                            display_name: ~4 GB, ~0.5 CPU
                            kubespawner_override:
                                mem_guarantee: 1.809G
                                cpu_guarantee: 0.025
                        mem_16:
                            display_name: ~16 GB, ~2.0 CPU
                            kubespawner_override:
                                mem_guarantee: 14.469G
                                cpu_guarantee: 0.5
              kubespawner_override:
                image: hub.k8s.ucar.edu/cislcloudpilot/cisl-cloud-base:2023-12-27.01
                imagePullSecrets:
                    - harbor-registry-secret
                cpu_limit: null
                mem_limit: null
            - display_name: NSF NCAR GPU Notebooks
              slug: ncargpu
              description: Start a container with access to GPU hardware
              profile_options:
                image:
                    display_name: Image
                    choices:
                        ncartensor:
                            display_name: NCAR Tensorflow ML Notebook
                            slug: ncartensor
                            kubespawner_override:
                                image: hub.k8s.ucar.edu/cislcloudpilot/cisl-cloud-gpu-tf:2023-12-27.01
                                imagePullSecrets:
                                    - harbor-registry-secret
                        ncarpytorch:
                            display_name: NCAR Pytorch ML Notebook
                            slug: ncarpytorch
                            kubespawner_override:
                                image: hub.k8s.ucar.edu/cislcloudpilot/cisl-cloud-gpu-pyt:2023-12-27.01
                                imagePullSecrets:
                                    - harbor-registry-secret
              kubespawner_override:
                mem_limit: null
                mem_guarantee: 14G
                environment:
                    NVIDIA_DRIVER_CAPABILITIES: compute,utility,graphics
                extra_pod_config:
                    runtimeClassName: nvidia
                extra_resource_limits:
                    nvidia.com/gpu: "1"
    ingress:
        enabled: true
        annotations:
            nginx.ingress.kubernetes.io/proxy-body-size: 600m
            nginx.org/client-max-body-size: 10m
            nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
            nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/secure-backends: "true"
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/websocket-services: proxy-public
            nginx.org/websocket-services: proxy-public
            cert-manager.io/cluster-issuer: incommon
        ingressClassName: nginx
        # <MODS> Adjust the hosts entries in this next session.
        hosts:
            - ENC[AES256_GCM,data:vpVodVU+GAQBoHNWyyHajAW3HPY=,iv:X8afA5mnsxTDWoOTm2gc4a3b/Ht2vT6wyy2EkUG7uq0=,tag:Dneue7fBaCS8DQTLjGU8kg==,type:str]
        tls:
            - hosts:
                - ENC[AES256_GCM,data:qKYDkX+pMkCLm7PtEOOPO1Yh9rs=,iv:15NbizMI0SWWKNrIPlSnDZdlzEU0Eh10tXuL3K73UW0=,tag:pcxsGkGbsnHLHZRd1KzfaA==,type:str]
              secretName: ENC[AES256_GCM,data:f4Dw274ivCZjqFMx6Uc+mmET+w==,iv:oS5MVy5pmY+SI/PwDZ3ovatK158jIMZ9nUe2gQHgdlI=,tag:4TaIg01brp0vwqVDYsS8NA==,type:str]
              # </MODS>
dask-gateway:
    # Enabling dask-gateway will install Dask Gateway as a dependency.
    enabled: true
    # Futher Dask Gateway configuration goes here
    # See https://github.com/dask/dask-gateway/blob/master/resources/helm/dask-gateway/values.yaml
    gateway:
        backend:
            scheduler:
                extraPodConfig: null
                #          serviceAccountName: user-sa
                #          tolerations:
                #            # Let's put schedulers on notebook nodes, since they aren't ephemeral
                #            # dask can recover from dead workers, but not dead schedulers
                #            - key: "hub.jupyter.org/dedicated"
                #              operator: "Equal"
                #              value: "user"
                #              effect: "NoSchedule"
                #            - key: "hub.jupyter.org_dedicated"
                #              operator: "Equal"
                #              value: "user"
                #              effect: "NoSchedule"
                #          nodeSelector:
                #            k8s.dask.org/node-purpose: scheduler
                cores:
                    request: 0.01
                    limit: 1
                memory:
                    request: 128M
                    limit: 1G
            worker:
                extraContainerConfig:
                    securityContext:
                        runAsGroup: 1000
                        runAsUser: 1000
                extraPodConfig:
                    #          serviceAccountName: user-sa
                    securityContext:
                        fsGroup: 1000
        #          tolerations:
        #            - key: "k8s.dask.org/dedicated"
        #              operator: "Equal"
        #              value: "worker"
        #              effect: "NoSchedule"
        #            - key: "k8s.dask.org_dedicated"
        #              operator: "Equal"
        #              value: "worker"
        #              effect: "NoSchedule"
        #          nodeSelector:
        #            # Dask workers get their own pre-emptible pool
        #            k8s.dask.org/node-purpose: worker
        # TODO: figure out a replacement for userLimits.
        extraConfig:
            optionHandler: |
                from dask_gateway_server.options import Options, Integer, Float, String, Mapping
                import string

                # Escape a string to be dns-safe in the same way that KubeSpawner does it.
                # Reference https://github.com/jupyterhub/kubespawner/blob/616f72c4aee26c3d2127c6af6086ec50d6cda383/kubespawner/spawner.py#L1828-L1835
                # Adapted from https://github.com/minrk/escapism to avoid installing the package
                # in the dask-gateway api pod which would have been problematic.
                def escape_string_label_safe(to_escape):
                    safe_chars = set(string.ascii_lowercase + string.digits)
                    escape_char = "-"
                    chars = []
                    for c in to_escape:
                        if c in safe_chars:
                            chars.append(c)
                        else:
                            # escape one character
                            buf = []
                            # UTF-8 uses 1 to 4 bytes per character, depending on the Unicode symbol
                            # so we need to transform each byte to its hex value
                            for byte in c.encode("utf8"):
                                buf.append(escape_char)
                                # %X is the hex value of the byte
                                buf.append('%X' % byte)
                            escaped_hex_char = "".join(buf)
                            chars.append(escaped_hex_char)
                    return u''.join(chars)

                def cluster_options(user):
                    safe_username = escape_string_label_safe(user.name)
                    def option_handler(options):
                        if ":" not in options.image:
                            raise ValueError("When specifying an image you must also provide a tag")
                        scheduler_extra_pod_annotations = {
                            "hub.jupyter.org/username": safe_username,
                            "prometheus.io/scrape": "true",
                            "prometheus.io/port": "8787",
                        }
                        extra_labels = {
                            "hub.jupyter.org/username": safe_username,
                        }
                        return {
                            "worker_cores_limit": options.worker_cores,
                            "worker_cores": options.worker_cores,
                            "worker_memory": "%fG" % options.worker_memory,
                            "image": options.image,
                            "scheduler_extra_pod_annotations": scheduler_extra_pod_annotations,
                            "scheduler_extra_pod_labels": extra_labels,
                            "worker_extra_pod_labels": extra_labels,
                            "environment": options.environment,
                        }
                    return Options(
                        Integer("worker_cores", 4, min=1, label="Worker Cores"),
                        Float("worker_memory", 8, min=1, label="Worker Memory (GiB)"),
                        # The default image is set via DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE env variable
                        String("image", label="Image"),
                        Mapping("environment", {}, label="Environment Variables"),
                        handler=option_handler,
                    )
                c.Backend.cluster_options = cluster_options
            idle: |
                # timeout after 30 minutes of inactivity
                c.KubeClusterConfig.idle_timeout = 1800
        # Users connect to the Gateway through the JupyterHub service.
        prefix: /services/dask-gateway
        auth:
            # Use JupyterHub to authenticate with Dask Gateway
            type: jupyterhub
    traefik:
        #    nodeSelector:
        #      k8s.dask.org/node-purpose: core
        service:
            # Access Dask Gateway through JupyterHub. To access the Gateway from outside JupyterHub, this must be changed to a `LoadBalancer`.
            type: ClusterIP
# A placeholder as global values that can be referenced from the same location
# of any chart should be possible to provide, but aren't necessarily provided or
# used.
#global: {}
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age:
        - recipient: age1ucetgj7k3whaqf9nulacsqarur6nrgzuyt59apeptu5cphd6ksdsqpy5he
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBqbzVCSE9RM0tvcVRkRDM5
            SnhaV2RlQ1dpVjR4Y1dZbFhnU1U5cGp1WFJJCk4yUFBzdHAzNU94bHpyb2dtTzMy
            VW9VSEdvc1RMclRIUkF5aC93MXBNVm8KLS0tIDJha2RJbFMrWEJVelBFTXpobmxC
            eHpBb2tHMmZBY1BvS3RqVGZEZVFsTzAK7Ly4nwPXQM5sGXRIb+BKlInYP1sH4JaY
            j4sFfsstWn6VD4dkQ0mmjlkvMAu2KRWb6UhKXiKvyS4kUTxthJlrqw==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1dnkv8vy8xkl5afwuwl55ycpquy2uk7ypc5ad87sfug2zffp6jgkqwwzglr
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBsS3NqV1hOa09GSXB2N0pV
            NVVOekhQT2dLd0R0a1ZXdDcyNCtzOGQ0ODF3CkF3WVVBMjJuTkVEYVZFRk52RTdv
            RHhobElQcXFmOUpEcWk3eEd2cldMKzgKLS0tIEQxUEQycmNWUnlDVzkzcmRHckdp
            ZXlvWWErbGZJZWFLRzZYL0x5NHBVWkkKZUigLuVfJdxRTF8wpevkcPxlHm6Prt6N
            C1586i3oURcEQdeteGkSY0x3MVslVxeLMqPynt1kJuu1xq1qwbxA+w==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1wt75fkqsa2ngrhtmr7ws2ve8v9h2463hryj4jk4k7m5khxmc9pgqgqag8x
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBYeDA3QzJqbFBmNlNTdFQz
            enlscEN5QmxMczlpK3RmZ2MvdURqUFljNVFBClhpV1I2L05rQ2lxWUxKUGdQZDVM
            MG9oVnlyUTZnR05VK2VabDhXWmFvWDgKLS0tIEl2WTEzVk43bzhIaDJBV0NGZ0Vq
            NnRDcG9teXR1ajFYUDFWMzh6YmlIeGMKBWNhFEFZaNaFjfB4IEoSBrErcDyPnzam
            86BSMyk+/pWFg94zOvbeO1yiH5Ab+yka2zuM7pAG8HUiIfcFiufzSg==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1fqw4znyl0zjpw5ta7ll3auxpzg8dme578jgw43a0dtzjhwjn4qlstaez7c
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSAzTGV0VFZTUmpvaWtsOGFo
            OXYyYlpSMFpNNXkvY1FzK3pKY3d4RUxBd2wwCkhXdWNMWXRrdUl2ZG1uZGRnd2xI
            cS8yN216UGpqMWpxenpCTkZ4dTNBZ3cKLS0tIDZHci9nbmRlcEdMSFR6L2NtN2Zt
            dCtGbHd6OHhCQjErMCtySFNBSEQ3YmcKkQk+cnEWIKfEbHpKlsZcujqGsczHkPM8
            Xnn2LAan8J0xYWNUAjO1HkW51yObyPgaKVpob4nuBbf37Yl9jOsjjw==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1m2ay7zlek6d4uctt09vsw5l8gpydjlvu9xemv8pqh97urdmhhyrsh9qe86
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSB0dkN3aVdxUHFoTlFyR0ZH
            dnA3T2srWlF5K0puQWdoVDJOa2xySjZ2d3pnCjJFNTNlN1pDTklVd3Q2OEpaUGJv
            N3VzaUlGaEJCRFhCMGNvdVVMTzYxRmMKLS0tIFdyT0ZJR2NJaExWM09ZY3E1dC9P
            R2diR1VNL2hzUStuR0lxZm0rNTFYM0UKyNcMLrc1v8xg2P8SPqmpJDp3PI7O64d3
            n4SP3aSqQJDV/7/kHPrhStQfMCoPNvRmKZkifQI5wn1+xoqdsrOHNQ==
            -----END AGE ENCRYPTED FILE-----
    lastmodified: "2024-03-14T21:18:00Z"
    mac: ENC[AES256_GCM,data:mX2UCTNq2g1Pn7uvYn+xD+WcrAlA94aMEGDb01zhKWe+5EKVk8T2JjczOhCRnQFHYc4z3HytM2pY6EbmlFxg4NucHmW3l/u/uTlCQhFJIzC0xAwnmE4OtpHLzG9c6wu0ImV6fXixoFaM+AuR/ql2BuRTt7tjUxwvSdrL/mCJXOQ=,iv:7Fk2VTOAeug1gjmUQoOynN6jEsT5rg6PiDsWJ1Ikl5s=,tag:np5bwyCC4Dl0n6zrlVbYdw==,type:str]
    pgp: []
    encrypted_regex: ^(client_id|client_secret|secretToken|admin_users|oauth_callback_url|allowed_organizations|extraVolumes|extraVolumeMounts|hosts|secretName)$
    version: 3.8.1
